import org.xml.sax.Attributes
import org.xml.sax.SAXException
import org.xml.sax.helpers.DefaultHandler

import javax.xml.parsers.ParserConfigurationException
import javax.xml.parsers.SAXParser
import javax.xml.parsers.SAXParserFactory
import java.util.jar.JarEntry
import java.util.jar.JarOutputStream
import java.util.regex.Pattern
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

configurations {
    innerPlugin
}

def innerPluginApkList = []

class FaiyExt {
    private String pluginProcess = ":plugin"

    public String getPluginProcess() {
        return pluginProcess
    }

    public void setPluginProcess(String process) {
        this.pluginProcess = process
    }
}
extensions.create('fairy', FaiyExt)

if ("false".equals(rootProject.properties.get("android.enableAapt2"))) {
    throw new Exception("请开启aapt2编译开关：android.enableAapt2")
}

//generateSourcess时借此文件生成attrs.xml
android.aaptOptions.additionalParameters("--emit-ids", project.buildDir.absolutePath + "/outputs/generated_exported_all_resouces.properties")

afterEvaluate {

    if (android.defaultConfig.applicationId == null) {
        throw new Exception("宿主build.gradle未配置android.defaultConfig.applicationId")
    }

    //收集需要内置的插件文件地址
    configurations.innerPlugin.files.each { file ->
        innerPluginApkList << file.absolutePath
    }

    for (variant in android.applicationVariants) {

        def varName = variant.name;
        def buildTypeName = variant.buildType.name
        def flavorName = variant.flavorName
        def varDirName =  variant.dirName

        println 'Check Env : variant=' + varName +  ", buildTypeName=" + buildTypeName + ", flavorName=" + flavorName + ", varDirName=" + varDirName

        variant.getMergeResources().doLast {

            project.logger.error '生成一份主题patch包，编译非独立插件时需要此包'

            File patchDir = new File(project.buildDir.absolutePath, "outputs/theme_patch/" + varDirName);
            patchDir.mkdirs();

            //宿主资源id分组就靠这个文件了
            def String publicAttrrsXml = "res/values/public_attrs.xml" ;
            def String publicAttrrsXmlFile = new File(patchDir.absolutePath, publicAttrrsXml).absolutePath;

            //导出一份主题包备用，编译非独立插件时需要
            createThemePatch(varName, buildTypeName, patchDir, publicAttrrsXmlFile);

            if(!file(publicAttrrsXmlFile).exists()) {
                throw new FileNotFoundException("createThemePatch 失败，public_attrs.xml 文件未生成，请检查路径：" + publicAttrrsXmlFile)
            }

            String mergeResourcesOutPath = outputDir.absolutePath;

            //需要确保aapt2在环境变量中，否则可能会执行失败
            //Android Studio环境中的aapt2和命令行中的可能不是同一个版本，
            //idea使用的版本位于～/.gradle/caches/transforms-1/files-1.1/aapt2-**-osx.jar/**/aapt2-**/aapt2
            //sdk的版本位于～/Library/Android/sdk/build-tools/28.0.3//aapt2
            //如果不是同一个版本可能出现Android Resource Link错误、magic number错误
            //因此还需要保证环境变量中的aapt2和idea中使用的是相同的版本，并不低于28.0.3
            File buildToolsPath = new File(android.getAdbExecutable().getParentFile().getParentFile(), "build-tools/" + android.getBuildToolsVersion())
            String aapt2Exe = new File(buildToolsPath, "aapt2" + (System.getProperty("os.name").startsWith("Windows")?".exe":"")).absolutePath

            projects.logger.log(LogLevel.ERROR, "$aapt2Exe compile -o  $mergeResourcesOutPath $publicAttrrsXmlFile")
            "$aapt2Exe compile -o  $mergeResourcesOutPath $publicAttrrsXmlFile".execute().waitFor()

            //检查aapt2是否执行成功
            if(!file(mergeResourcesOutPath + "/values_public_attrs.arsc.flat").exists()) {
                throw new FileNotFoundException("values_public_attrs.arsc.flat 文件未生成，请检查路径：$publicAttrrsXmlFile")
            }

            //生成values_public_attrs这个文件以后，publicAttrrsXmlFile文件已经无用了，
            //接下来修改内容需要为生成一个public attr
            String text = file(publicAttrrsXmlFile).text
                    .replace("public_static_final_host", "public_static_final_plugin")
                    .replace("0x7f3", "0x7f0")
                    .replace("0x7f4", "0x7f1")
            file(publicAttrrsXmlFile).write(text)
        }

        def mergeAssetsTask = variant.getMergeAssets()
        mergeAssetsTask.setOnlyIf { true }
        mergeAssetsTask.outputs.upToDateWhen { false }
        mergeAssetsTask.doLast {

            //检查内置插件坐标是否存在，不存在给出提示
            innerPluginApkList.each { innerAPK ->
                if (!file(innerAPK).exists()) {
                    project.logger.info "引用的插件apk文件不存在，可能插件apk还未编译完成，或者宿主innerPlugin配置的路径错误：", innerAPK
                }
            }

            copy {
                project.logger.error '复制宿主依赖的内置插件到merge后的assets目录\n' + innerPluginApkList + "\n" + outputDir
                from files(innerPluginApkList)
                into(outputDir)
            }
        }

        tasks.findByName("process${varName.capitalize()}Manifest").doLast {
            fileTree(manifestOutputDirectory).include("**/AndroidManifest.xml").each { manifestFile->
                println '正在检查Manifest中的插件配置是否正确' + manifestFile.absolutePath

                def originManifestContent = manifestFile.getText('UTF-8')
                if (originManifestContent.contains("{applicationId}")) {
                    throw new Exception("宿主build.gradle未配置android.defaultConfig.applicationId")
                }

                //生成prop文件
                def pattern = Pattern.compile("versionName\\s*=\\s*\"(.+?)\"");
                def matcher = pattern.matcher(originManifestContent);
                if (matcher.find()) {
                    def versionName = matcher.group(1)
                    //File hostInfo = new File("${project.buildDir}/outputs/HostInfo-" + tastName.replace("process","").replace("Resources", "") + ".prop")
                    //没有单独命名，有多个favor时文件会覆盖
                    File hostInfo = new File("${project.buildDir}/outputs/HostInfo.prop")
                    if (hostInfo.exists()) {
                        hostInfo.delete()
                    }
                    //没有单独命名，有多个abi时文件会覆盖
                    println '正在生成文件' + hostInfo.absolutePath
                    hostInfo.write("#Host Manifest CREATED AT " + new Date().format("yyyy-MM-dd HH:mm::ss"))
                    hostInfo.append("\nhost.versionCode=" + android.defaultConfig.versionCode)
                    //versionName可能有后缀，所以以Manifest中为准
                    hostInfo.append("\nhost.versionName=" + versionName)
                    hostInfo.append("\nhost.buildType=" + buildTypeName)
                    hostInfo.append("\nhost.flavorName=" + flavorName)
                    hostInfo.append("\nhost.varName=" + varName)
                    hostInfo.append("\nhost.varDirName=" + varDirName)
                    def packageName = android.defaultConfig.applicationId
                    if (android.buildTypes[buildTypeName].applicationIdSuffix != null) {
                        packageName = packageName + android.buildTypes[buildTypeName].applicationIdSuffix;
                    }

                    hostInfo.append("\nhost.applicationId=" + packageName)
                }

                //指定插件进程名，设置为空串或者null即是和宿主同进程
                //不设置即使用默认进程(:plugin)
                def pluginProcessName = fairy.pluginProcess
                if (!":plugin".equals(pluginProcessName)) {
                    def customPluginProcessName = "";
                    if (pluginProcessName != null) {
                        customPluginProcessName = "android:process=\"" + pluginProcessName + "\""
                    }
                    println '正在设置插件进程配置：' + customPluginProcessName
                    def modifyedManifestContent = originManifestContent.replaceAll("android:process=\":plugin\"", customPluginProcessName)
                    manifestFile.write(modifyedManifestContent, 'UTF-8')
                }
            }
        }

        tasks.findByName("process${varName.capitalize()}Resources").doLast {
            //实际上最新版sdk和gradle可以直接指定apk了, 可以不使用.ap_文件
            //def processResFullName = baseVariant.apkData.fullName
            copy {
                project.logger.error name + ' 编译宿主资源编译完成后导出后缀为.ap_的资源包，此资源包在编译非独立插件时需要此包'
                println "from :" + resPackageOutputFolder
                from resPackageOutputFolder
                include("*.ap_")
                into("${project.buildDir}/outputs/")
                rename(new Transformer<String, String>() {
                    @Override
                    String transform(String s) {
                        //多abi时会相互覆盖，不过对我们而言应该没什么影响
                        project.logger.error "rename: " + s
                        return "resources.ap_"
                    }
                })
            }
        }

        //将宿主的所有class，包括宿主的、和它所有依赖的类，合并起来打出一个jar来，供将来的非独立插件使用
        def org.gradle.api.tasks.compile.JavaCompile javaCompile = variant.javaCompile;
        javaCompile.doLast {

            println "Merge Jar After Task " + name + " buildType is " + buildTypeName + ", flavorName is " + flavorName +  ", varName is " + varName

            File jarFile = new File(project.buildDir, "outputs/host_classes.jar")
            if (jarFile.exists()) {
                jarFile.delete()
            }

            JarMerger jarMerger = new JarMerger(jarFile)
            try {
                jarMerger.setFilter(new JarFilter() {
                    public boolean checkEntry(String archivePath) throws JarFilter.ZipAbortException {
                        if (archivePath.endsWith(".class")) {
                            return true
                        }
                        return false
                    }
                });

                classpath.each { jarPath ->
                    println "adding jar " + jarPath
                    jarMerger.addJar(jarPath);
                    //jarMerger.addFolder(directoryInput.getFile());
                }

                def buildClassesTaskName = "packageAppClasses" + varName.capitalize();
                def classesPath= 'intermediates/app_classes/' + varName + "/" + buildClassesTaskName + "/classes.jar"

                if (!tasks.findByName(buildClassesTaskName)) {
                    throw new IllegalAccessError("未找到打包宿主classes的task，请检查android gradle 插件版本")
                }

                File classes = new File(buildDir, classesPath);

                if (!classes.exists()) {
                    try {
                        tasks.getByName(buildClassesTaskName).execute()
                    } catch(Exception e) {
                        projects.logger.log(LogLevel.ERROR, "fail to create jar for task " + name + " " + buildClassesTaskName)
                    }
                } else {
                    projects.logger.log(LogLevel.DEBUG, "classes path already exists： " + classes.absolutePath)
                }
                if (classes.exists()) {
                    println "adding jar " + classes
                    jarMerger.addJar(classes)
                } else {
                    projects.logger.log(LogLevel.ERROR, "Not exists : classes file path is " + classes.absolutePath)
                    projects.logger.log(LogLevel.ERROR, "Not exists : build classes task name is " + buildClassesTaskName)
                }
            } finally {
                jarMerger.close()
            }

            println "Merge Jar Finished, Jar is at " + jarFile.absolutePath
        }

        //处理混淆，这里保存混淆以后dex之前的jar包作为基线包备用
        def proguardTask = project.tasks.findByName("transformClassesAndResourcesWithProguardFor${variant.name.capitalize()}")
        if (proguardTask) {
            proguardTask.doFirst {
                println "开始混淆任务：" + varName.capitalize()
            }
            proguardTask.doLast {
                println "混淆完成：" + varName.capitalize()
                boolean isFind = false;
                proguardTask.outputs.files.files.each { File file->
                    //http://blog.csdn.net/sbsujjbcy/article/details/50839263
                    //build/intermediates/transforms/proguard/anzhi/release/jars/3/1f/main.jar
                    //最新版本路径已发生变化；2017-11-12
                    project.logger.error "file outputs=>${file.absolutePath}"
                    String keyword = File.separator + "transforms" + File.separator + "proguard" + File.separator;
                    println String.valueOf(file.absolutePath.contains(keyword)) + ", " + String.valueOf(file.absolutePath.endsWith(buildTypeName))
                    if (file.absolutePath.contains(keyword) && file.absolutePath.endsWith(buildTypeName)) {

                        isFind = true;
                        def sourceHostObfuscatedJar
                        if (new File(file.absolutePath + "/0.jar").exists()) {
                            sourceHostObfuscatedJar = file.absolutePath + "/0.jar"
                        } else if (new File(file.absolutePath + "/jars/3/1f/main.jar").exists()) {
                            sourceHostObfuscatedJar = file.absolutePath + "/jars/3/1f/main.jar"
                        }
                        def hostObfuscatedJar = "host_obfuscated.jar"
                        project.logger.error "导出混淆后的宿主jar " + sourceHostObfuscatedJar + " 包到 " + "${project.buildDir}/outputs/" + hostObfuscatedJar

                        copy {
                            from sourceHostObfuscatedJar
                            into("${project.buildDir}/outputs/")
                            rename(new Transformer<String, String>() {
                                @Override
                                String transform(String s) {
                                    project.logger.error "rename:" + s
                                    return hostObfuscatedJar
                                }
                            })
                        }
                    }
                }
                if (!isFind) {
                    throw "obfuscated jar file not found, please check."
                }
            }
        }

        //修改public_attrs的内容，填充attr的id
        tasks.findByName("generate${varName.capitalize()}Sources").doLast {
            def f = file(buildDir.absolutePath + "/outputs/theme_patch/" + varDirName + "/res/values/public_attrs.xml")
            project.logger.error "update public attrs ids, file=" + f.absolutePath
            def String text = f.text
            if (f.exists()) {
                file(buildDir.absolutePath + "/outputs/generated_exported_all_resouces.properties").eachLine { el->
                    if (el.contains(":attr/")) {
                        String[] attrIdKeyValue = el.split("/")[1].split(" = ");
                        text = text.replace("name=\"" + attrIdKeyValue[0] +"\">", "name=\"" + attrIdKeyValue[0] +"\" id=\"" + attrIdKeyValue[1] +  "\">")
                    }
                }
                f.write(text)
            } else {
                throw new Exception(f.absolutePath + " Not Found!")
            }
        }

        //导出宿主最终的基线包
        tasks.findByName("assemble${varName.capitalize()}").finalizedBy makeHostBaseLine
    }

    if (gradle.startParameter.taskNames.find {
        println ">>>>>>执行命令: " + it
        it.startsWith("assemble") || it.startsWith("build")
    } != null) {
        //nothing
    }
}

//将宿主编译产物作为基线包存档，这样可以使插件脱离宿主工程独立编译
task makeHostBaseLine(type: Zip) {
    extension "bar" //Baseline Application Resource
    baseName 'host'
    from zipTree("build/outputs/resources.ap_")
    from('build/outputs') {
        exclude '*.ap_'
    }
}

//导出主题patch
def createThemePatch(String varName, String buildType, File patchDir, String publicAttrsXmlFile) {

    def packageName = android.defaultConfig.applicationId
    if (android.buildTypes[buildType].applicationIdSuffix != null) {
        packageName = packageName + android.buildTypes[buildType].applicationIdSuffix;
    }

    String mergedResDir = "${project.buildDir}/intermediates/incremental/merge" + varName.capitalize() + "Resources/merged.dir/"
    FileTree allxmlFiles = fileTree(dir: mergedResDir)
    allxmlFiles.include 'values/values*.xml',
            'values-v1*/values-v1*.xml',
            'values-v2*/values-v2*.xml',
            'values-*-v1*/values-*-v1*.xml',
            'values-*-v4/values-*-v4.xml',
            'values-land/values-land.xml',
            'values-*-v2*/values-*-v2*.xml',
            'values-*-v8/values-*-v8.xml'

    allxmlFiles.each { File itemFile ->
        def valuesDir = itemFile.getAbsolutePath().replace(itemFile.getParentFile().getParentFile().absolutePath, "").replace(itemFile.name, "")
        def destFile = new File(patchDir, 'res' + valuesDir + "patch_" + itemFile.name)
        destFile.getParentFile().mkdirs()
        println "export from " + itemFile + " to " + destFile

        //通过values.xml生成publicAttrsXml
        ThemeProcessor.exportThemeStyle(itemFile, destFile, packageName,
                itemFile.name.equals("values.xml")?new File(publicAttrsXmlFile):null)
    }
}

public class ThemeProcessor extends DefaultHandler {

    public static void exportThemeStyle(File srcFile, File destFile, String packageName, File attrFile) {
        try {
            SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
            saxParser.parse(new FileInputStream(srcFile), new ThemeProcessor(destFile, packageName, attrFile));
        } catch (ParserConfigurationException e) {
            System.out.println(e.getMessage());
        } catch (SAXException e) {
            System.out.println(e.getMessage());
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

    }

    ////////////////
    ////////////////
    ////////////////

    File destFile;
    String packageName;
    File attrFile;
    Stack<Node> stack = new Stack<Node>();
    BufferedWriter outXmlStream = null;
    BufferedWriter outPublicAttrStream = null;

    HashSet<String> attrSets = new HashSet<>();

    HashSet<String> dupcate = new HashSet<>();

    public ThemeProcessor(File destFile, String packageName, File attrFile) {
        this.destFile = destFile;
        this.packageName = packageName;
        this.attrFile = attrFile;
    }

    public void startDocument() throws SAXException {
        try {
            outXmlStream = new BufferedWriter(new FileWriter(destFile));
            outXmlStream.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            outXmlStream.write("\n<!-- AUTO-GENERATED FILE.  DO NOT MODIFY -->");


            if (attrFile != null) {
                attrFile.getParentFile().mkdirs()
                outPublicAttrStream = new BufferedWriter(new FileWriter(attrFile));
                outPublicAttrStream.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
                outPublicAttrStream.write("\n<!-- AUTO-GENERATED FILE.  DO NOT MODIFY -->");
                outPublicAttrStream.write("\n<resources>");
                //唯独attr仍然使用010000开头，是为了和插件中的attr同组
                outPublicAttrStream.write("\n    <public type=\"attr\" name=\"public_static_final_host_attr_\" id=\"0x7f010000\" />\n" +
                        "    <public type=\"drawable\" name=\"public_static_final_host_drawable_\" id=\"0x7f320000\" />\n" +
                        "    <public type=\"layout\" name=\"public_static_final_host_layout_\"   id=\"0x7f330000\" />\n" +
                        "    <public type=\"anim\" name=\"public_static_final_host_anim_\"    id=\"0x7f340000\" />\n" +
                        "    <public type=\"xml\" name=\"public_static_final_host_xml_\"      id=\"0x7f350000\" />\n" +
                        "    <public type=\"raw\" name=\"public_static_final_host_raw_\"     id=\"0x7f360000\" />\n" +
                        "    <public type=\"dimen\" name=\"public_static_final_host_dimen_\"  id=\"0x7f370000\" />\n" +
                        "    <public type=\"string\" name=\"public_static_final_host_string_\"  id=\"0x7f380000\" />\n" +
                        "    <public type=\"style\" name=\"public_static_final_host_style_\"  id=\"0x7f390000\" />\n" +
                        "    <public type=\"color\" name=\"public_static_final_host_color_\"  id=\"0x7f3a0000\" />\n" +
                        "    <public type=\"id\" name=\"public_static_final_host_id_\"   id=\"0x7f3b0000\" />\n" +
                        "    <public type=\"bool\" name=\"public_static_final_host_bool_\"   id=\"0x7f3c0000\" />\n" +
                        "    <public type=\"integer\" name=\"public_static_final_host_int_\" id=\"0x7f3d0000\" />\n" +
                        "    <public type=\"array\" name=\"public_static_final_host_array_\" id=\"0x7f3e0000\" />\n" +
                        "    <public type=\"menu\" name=\"public_static_final_host_menu_\"  id=\"0x7f3f0000\" />\n" +
                        "    <public type=\"mipmap\" name=\"public_static_final_host_mipmap_\" id=\"0x7f400000\" />\n" +
                        "    <public type=\"animator\" name=\"public_static_final_host_animator\"  id=\"0x7f410000\" />\n" +
                        "    <public type=\"fraction\" name=\"public_static_final_host_fraction\"  id=\"0x7f420000\" />\n" +
                        "    <public type=\"font\" name=\"public_static_final_host_font\"    id=\"0x7f430000\" />\n" +
                        "    <public type=\"plurals\" name=\"public_static_final_host_plurals\" id=\"0x7f440000\" />\n" +
                        "    <public type=\"interpolator\" name=\"public_static_final_host_interpolator\" id=\"0x7f450000\" />\n" +
                        "    <public type=\"transition\" name=\"public_static_final_host_transition\" id=\"0x7f460000\" />\n" +
                        "\n" +
                        "    <item name=\"public_static_final_host_attr_\" type=\"attr\" ></item>\n" +
                        "    <item name=\"public_static_final_host_anim_\" type=\"anim\" ></item>\n" +
                        "    <item name=\"public_static_final_host_animator\" type=\"animator\" ></item>\n" +
                        "    <item name=\"public_static_final_host_array_\" type=\"array\" ></item>\n" +
                        "    <item name=\"public_static_final_host_bool_\" type=\"bool\" ></item>\n" +
                        "    <item name=\"public_static_final_host_color_\" type=\"color\" ></item>\n" +
                        "    <item name=\"public_static_final_host_dimen_\" type=\"dimen\" ></item>\n" +
                        "    <item name=\"public_static_final_host_drawable_\" type=\"drawable\" ></item>\n" +
                        "    <item name=\"public_static_final_host_font\" type=\"font\" ></item>\n" +
                        "    <item name=\"public_static_final_host_fraction\" type=\"fraction\" ></item>\n" +
                        "    <item name=\"public_static_final_host_int_\" type=\"integer\" ></item>\n" +
                        "    <item name=\"public_static_final_host_interpolator\" type=\"interpolator\" ></item>\n" +
                        "    <item name=\"public_static_final_host_layout_\" type=\"layout\" ></item>\n" +
                        "    <item name=\"public_static_final_host_menu_\" type=\"menu\" ></item>\n" +
                        "    <item name=\"public_static_final_host_mipmap_\" type=\"mipmap\" ></item>\n" +
                        "    <item name=\"public_static_final_host_plurals\" type=\"plurals\" ></item>\n" +
                        "    <item name=\"public_static_final_host_raw_\" type=\"raw\" ></item>\n" +
                        "    <item name=\"public_static_final_host_string_\" type=\"string\" ></item>\n" +
                        "    <item name=\"public_static_final_host_style_\" type=\"style\" ></item>\n" +
                        "    <item name=\"public_static_final_host_transition\" type=\"transition\" ></item>\n" +
                        "    <item name=\"public_static_final_host_xml_\" type=\"xml\" ></item>\n" +
                        "\n" +
                        "    <!-- 以下attr的配置是为了在编译宿主时将所有attr设置为public，避免产生^attr-private字段-->\n" +
                        "    <!-- 在28.0.3以后如果配置了public attr，其他没有配置成public的attr会变成^attr-private字段-->\n")
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

        if (qName.equals("bool") || qName.equals("color") || qName.equals("dimen") || qName.equals("eat-comment")
                || qName.equals("integer") || qName.equals("string")
                || qName.equals("ns2:g") || qName.equals("ns1:g")
                || qName.equals("u")) {
            stack.add(new Node(attributes.getValue("name"), false, true));
            return;
        }

        boolean skip = false;
        if (!qName.equals("declare-styleable")) {
            String space = "\n";
            for (int i = 0; i < stack.size(); i++) {
                space = space + "    ";
            }
            String tag = space + "<" + qName;
            for (int i = 0; i < attributes.getLength(); i++) {
                tag = tag + " " + attributes.getQName(i) + "=\""+ attributes.getValue(i) + "\"";
            }
            tag = tag + ">";
            try {
                if (qName.equals("attr") && (attributes.getValue("name").startsWith("android:") || (attrSets.add(attributes.getValue("name"))?false:(dupcate.add(attributes.getValue("name"))?true:true)))
                        || (qName.equals("public") && (!attributes.getValue("type").equals("attr") || attributes.getValue("name").startsWith("public_static_final_")))) {
                    //skip
                    skip = true;
                } else {
                    if (qName.equals("enum")) {
                        if (!stack.empty()) {
                            Node top = stack.peek();
                            if (!dupcate.contains(top.name)) {
                                outXmlStream.write(tag);
                                if (qName.equals("attr") && outPublicAttrStream != null) {
                                    outPublicAttrStream.write(tag.replace("<attr", "<public type=\"attr\" ") + "</public>")
                                }
                            }
                        } else {
                            outXmlStream.write(tag);
                            if (qName.equals("attr") && outPublicAttrStream != null) {
                                outPublicAttrStream.write(tag.replace("<attr", "<public type=\"attr\" ") + "</public>")
                            }
                        }
                    } else {
                        outXmlStream.write(tag);
                        if (qName.equals("attr") && outPublicAttrStream != null) {
                            outPublicAttrStream.write(tag.replace("<attr", "<public type=\"attr\" ") + "</public>")
                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        if (!stack.empty()) {
            Node top = stack.peek();
            top.hasChild = true;
        }
        stack.add(new Node(attributes.getValue("name"), false, skip));
    }

    public void endElement(String uri, String localName, String qName) throws SAXException {

        Node node = stack.pop();
        if (node.skip) {
            return;
        }

        if (!qName.equals("declare-styleable")) {
            String space = "";
            if (node.hasChild) {
                space = "\n";
                for (int i = 0; i < stack.size(); i++) {
                    space = space + "    ";
                }
            }
            try {
                if (!stack.empty()) {
                    Node parent = stack.peek();
                    if (qName.equals("enum") && dupcate.contains(parent.name)) {
                        //nothing
                    } else {
                        outXmlStream.write(space + "</" + qName + ">");
                    }
                } else {
                    outXmlStream.write(space + "</" + qName + ">");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    public void characters(char[] ch, int start, int length) throws SAXException {
        Node node = stack.peek();
        if (node.skip) {
            return;
        }

        String text = new String(ch, start, length);
        text = text.replaceAll("[\n ]", "");
        if (text.length() > 0) {
            try {
                if (text.startsWith("@color")) {
                    text = text.replace("@color", "@*" + packageName +":color");

                } else if (text.startsWith("@dimen")) {
                    text = text.replace("@dimen", "@*" + packageName +":dimen");

                } else if (text.startsWith("@string")) {
                    text = text.replace("@string", "@*" + packageName +":string");

                } else if (text.startsWith("@bool")) {
                    text = text.replace("@bool", "@*" + packageName +":bool");

                } else if (text.startsWith("@integer")) {
                    text = text.replace("@integer", "@*" + packageName +":integer");

                } else if (text.startsWith("@layout")) {
                    text = text.replace("@layout", "@*" + packageName +":layout");

                } else if (text.startsWith("@anim")) {
                    text = text.replace("@anim", "@*" + packageName +":anim");

                } else if (text.startsWith("@id")) {
                    text = text.replace("@id", "@*" + packageName +":id");

                } else if (text.startsWith("@drawable")) {
                    text = text.replace("@drawable", "@*" + packageName +":drawable");

                    //} else if (text.startsWith("?attr")) {
                    //    text = text.replace("?attr", "?*" + packageName +":attr");
                } else if (text.startsWith("@mipmap")) {
                    text = text.replace("@mipmap", "@*" + packageName +":mipmap");
                } else if (text.startsWith("@style")) {
                    if (node.name.equals("android:windowAnimationStyle")) {
                        text = text.replace("@style", "@*" + packageName +":style");
                    }
                }

                outXmlStream.write(text);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void endDocument() throws SAXException {
        try {
            outXmlStream.flush();
            outXmlStream.close();

            if (outPublicAttrStream != null) {
                outPublicAttrStream.write("\n</resources>");
                outPublicAttrStream.flush();
                outPublicAttrStream.close();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static class Node {
        String name = null;
        boolean hasChild = false;
        boolean skip = false;

        public Node(String name, boolean hasChild, boolean skip) {
            this.name = name;
            this.hasChild = hasChild;
            this.skip = skip;
        }
    }

}

public class JarMerger {
    private final byte[] buffer = new byte[8192];
    private final File jarFile;
    private FileOutputStream fos;
    private JarOutputStream jarOutputStream;

    private JarFilter filter;

    public JarMerger(File jarFile) throws IOException {
        this.jarFile = jarFile;
    }

    private void init() throws IOException {
        if(this.fos == null && this.jarOutputStream == null) {
            if(!this.jarFile.getParentFile().mkdirs() && !this.jarFile.getParentFile().exists()) {
                throw new RuntimeException("Cannot create directory " + this.jarFile.getParentFile());
            }
            this.fos = new FileOutputStream(this.jarFile);
            this.jarOutputStream = new JarOutputStream(fos);
        }
    }

    public void setFilter(JarFilter filter) {
        this.filter = filter;
    }

    public void addFolder(File folder) throws IOException {
        this.init();

        try {
            this.addFolderInternal(folder, "");
        } catch (JarFilter.ZipAbortException var3) {
            throw new IOException(var3);
        }
    }

    private void addFolderInternal(File folder, String path) throws IOException, JarFilter.ZipAbortException {
        File[] files = folder.listFiles();
        if(files != null) {
            File[] arr$ = files;
            int len$ = files.length;

            for(int i$ = 0; i$ < len$; ++i$) {
                File file = arr$[i$];
                if(!file.isFile()) {
                    if(file.isDirectory()) {
                        this.addFolderInternal(file, path + file.getName() + "/");
                    }
                } else {
                    String entryPath = path + file.getName();
                    if(this.filter == null || this.filter.checkEntry(entryPath)) {
                        this.jarOutputStream.putNextEntry(new JarEntry(entryPath));
                        FileInputStream fis = null;
                        try {
                            fis = new FileInputStream(file);

                            int count;
                            while((count = fis.read(this.buffer)) != -1) {
                                this.jarOutputStream.write(this.buffer, 0, count);
                            }
                        } finally {
                            if (fis != null) {
                                fis.close();
                                fis = null;
                            }
                        }

                        this.jarOutputStream.closeEntry();
                    }
                }
            }
        }

    }

    public void addJar(File file) throws IOException {
        this.addJar(file, false);
    }

    public void addJar(File file, boolean removeEntryTimestamp) throws IOException {
        this.init();

        FileInputStream e = null;
        ZipInputStream zis = null;
        try {
            e = new FileInputStream(file);
            zis = new ZipInputStream(e);

            ZipEntry entry;
            while((entry = zis.getNextEntry()) != null) {
                if(!entry.isDirectory()) {
                    String name = entry.getName();
                    if(this.filter == null || this.filter.checkEntry(name)) {
                        JarEntry newEntry;
                        if(entry.getMethod() == ZipEntry.STORED) {
                            newEntry = new JarEntry(entry);
                        } else {
                            newEntry = new JarEntry(name);
                        }

                        if(removeEntryTimestamp) {
                            newEntry.setTime(0L);
                        }

                        this.jarOutputStream.putNextEntry(newEntry);

                        int count;
                        while((count = zis.read(this.buffer)) != -1) {
                            this.jarOutputStream.write(this.buffer, 0, count);
                        }

                        this.jarOutputStream.closeEntry();
                        zis.closeEntry();
                    }
                }
            }
        } catch (JarFilter.ZipAbortException var13) {
            throw new IOException(var13);
        } finally {
            if (zis != null) {
                zis.close();
            }
            if (e != null) {
                e.close();
            }
        }

    }

    public void addEntry(String path, byte[] bytes) throws IOException {
        this.init();
        this.jarOutputStream.putNextEntry(new JarEntry(path));
        this.jarOutputStream.write(bytes);
        this.jarOutputStream.closeEntry();
    }

    public void close() throws IOException {
        if (this.jarOutputStream != null) {
            jarOutputStream.close();
            jarOutputStream = null;
        }
        if (this.fos != null) {
            fos.close();
            fos = null;
        }

    }
}

public interface JarFilter {
    boolean checkEntry(String var1) throws ZipAbortException;

    public static class ZipAbortException extends Exception {
        private static final long serialVersionUID = 1L;

        public ZipAbortException() {
        }

        public ZipAbortException(String format, Object... args) {
            super(String.format(format, args));
        }

        public ZipAbortException(Throwable cause, String format, Object... args) {
            super(String.format(format, args), cause);
        }

        public ZipAbortException(Throwable cause) {
            super(cause);
        }
    }
}